# Install and load required packages
install.packages(c("fixest", "ggplot2", "remotes"))
library(fixest)
library(ggplot2)
library(remotes)

# Install HonestDiD from GitHub
if (!requireNamespace("HonestDiD", quietly = TRUE)) {
  remotes::install_github("asheshrambachan/HonestDiD")
}
library(HonestDiD)

# Set seed and parameters
set.seed(2025)
n <- 1000
T_vec <- -5:4
true_ATT <- 3
n_sim <- 1000
estimates <- numeric(n_sim)

# Monte Carlo simulation for TWFE ATT at t = 0
for (s in 1:n_sim) {
  df <- expand.grid(id = 1:n, time = T_vec)
  df$treated <- ifelse(df$id <= n / 2, 1, 0)
  df$post <- ifelse(df$time >= 0 & df$treated == 1, 1, 0)
  df$trend <- ifelse(df$treated == 1, 0.6 * df$time, 0.4 * df$time)
  df$treatment_effect <- ifelse(df$post == 1, true_ATT, 0)
  df$eps <- rnorm(n * length(T_vec))
  df$y <- df$trend + df$treatment_effect + df$eps
  df <- df[df$time != -1, ]
  df$event_time <- factor(df$time, levels = setdiff(T_vec, -1))
  
  model <- tryCatch(
    feols(y ~ i(event_time, treated, ref = "-2") | id + time, data = df),
    error = function(e) NULL
  )
  
  if (!is.null(model)) {
    coef_names <- names(coef(model))
    t0 <- coef_names[grepl("event_time::0:treated", coef_names)]
    estimates[s] <- if (length(t0) > 0) coef(model)[t0[1]] else NA
  } else {
    estimates[s] <- NA
  }
}

# Clean simulation results
estimates_clean <- na.omit(estimates)
if (length(estimates_clean) == 0) stop("All estimates are NA")

# Summary statistics
mean_est <- mean(estimates_clean)
bias <- mean_est - true_ATT
rmse <- sqrt(mean((estimates_clean - true_ATT)^2))

cat("‚úÖ Valid simulations:", length(estimates_clean), "/", n_sim, "\n")
cat("True ATT:", true_ATT, "\n")
cat("Mean Estimate:", round(mean_est, 3), "\n")
cat("Bias:", round(bias, 3), "\n")
cat("RMSE:", round(rmse, 3), "\n")

# Histogram of TWFE estimates
df_plot <- data.frame(att = estimates_clean)
ggplot(df_plot, aes(x = att)) +
  geom_histogram(bins = 40, fill = "skyblue", color = "black") +
  geom_vline(xintercept = true_ATT, color = "red", linetype = "dashed", linewidth = 1.2) +
  geom_vline(xintercept = mean_est, color = "darkgreen", linetype = "dotted", linewidth = 1.2) +
  labs(
    title = "Distribution of TWFE Estimates (Group-Specific Trends)",
    subtitle = paste0("Bias = ", round(bias, 2), ", RMSE = ", round(rmse, 2)),
    x = "Estimated ATT at t = 0",
    y = "Frequency"
  ) +
  theme_minimal(base_size = 14)

# --- HonestDiD Smoothness Bounds Analysis ---

# Simulate one dataset
set.seed(999)
df <- expand.grid(id = 1:n, time = T_vec)
df$treated <- ifelse(df$id <= n / 2, 1, 0)
df$post <- ifelse(df$time >= 0 & df$treated == 1, 1, 0)
df$trend <- ifelse(df$treated == 1, 0.6 * df$time, 0.4 * df$time)
df$treatment_effect <- ifelse(df$post == 1, true_ATT, 0)
df$eps <- rnorm(n * length(T_vec))
df$y <- df$trend + df$treatment_effect + df$eps
df <- df[df$time != -1, ]
df$event_time <- factor(df$time, levels = setdiff(T_vec, -1))

# Estimate event-study
event_model <- feols(y ~ i(event_time, treated, ref = "-2") | id + time, data = df)

# Extract coefficients
event_coef <- coef(event_model)
coef_names <- names(event_coef)
event_times <- as.numeric(gsub("event_time::(-?[0-9]+):treated", "\\1", coef_names))

if (any(is.na(event_times))) {
  cat("‚ö†Ô∏è Coefficient names:\n")
  print(coef_names)
  stop("‚ùå Failed to extract numeric event times.")
}

# Order coefficients
sorted_index <- order(event_times)
betahat <- event_coef[sorted_index]
sigma <- vcov(event_model)[sorted_index, sorted_index]
event_times <- event_times[sorted_index]

# Define pre- and post-treatment periods
pre_periods <- event_times[event_times < 0]
post_periods <- event_times[event_times >= 0]

if (length(betahat) != length(pre_periods) + length(post_periods)) {
  stop("‚ùå Mismatch: betahat must match pre + post periods")
}

# Define l_vec for ATT at t = 0 (same short vector for both functions)
t0_index <- which(post_periods == 0)
l_vec_short <- basisVector(index = t0_index, size = length(post_periods))

# HonestDiD: Smoothness bounds
smooth_result <- createSensitivityResults(
  betahat = betahat,
  sigma = sigma,
  numPrePeriods = length(pre_periods),
  numPostPeriods = length(post_periods),
  l_vec = l_vec_short,
  Mvec = c(0, 0.01, 0.03, 0.05, 0.1, 0.2, 0.5)
)

# Original naive CI (same l_vec_short!)
original_ci <- constructOriginalCS(
  betahat = betahat,
  sigma = sigma,
  numPrePeriods = length(pre_periods),
  numPostPeriods = length(post_periods),
  l_vec = l_vec_short
)

# Plot results
plot_obj <- createSensitivityPlot(
  robustResults = smooth_result,
  originalResults = original_ci
)
print(plot_obj)

# Save plot as PNG
ggsave("HonestDiD_SmoothnessPlot.png", plot = plot_obj, width = 8, height = 5, dpi = 300)
cat("üìÅ Plot saved to: ", getwd(), "/HonestDiD_SmoothnessPlot.png\n", sep = "")
