# ✅ Install and load required packages
install.packages(c("Rmpfr", "gmp", "CVXR", "fixest", "ggplot2", "remotes"))

# Environment fix for GitHub packages
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")

# Re-install HonestDiD from GitHub (force = TRUE ensures clean rebuild)
remotes::install_github("asheshrambachan/HonestDiD", force = TRUE)

# Load libraries
library(Rmpfr)
library(CVXR)
library(fixest)
library(ggplot2)
library(HonestDiD)

# ✅ Ashenfelter’s Dip Data Generation
set.seed(999)
n <- 1000
time_periods <- -5:4
df <- expand.grid(id = 1:n, time = time_periods)

df$treated <- ifelse(df$id <= n/2, 1, 0)
df$post <- ifelse(df$time >= 0 & df$treated == 1, 1, 0)
df$base_trend <- 0.5 * df$time
df$dip <- ifelse(df$treated == 1 & df$time == -1, -4, 0)
df$treatment_effect <- ifelse(df$post == 1, 3, 0)
df$y <- df$base_trend + df$dip + df$treatment_effect + rnorm(n * length(time_periods))

# Drop t = -1 (the dip period) before estimation
df <- df[df$time != -1, ]
df$event_time <- factor(df$time, levels = setdiff(time_periods, -1))

# ✅ Estimate event-study model with TWFE
event_model <- feols(y ~ i(event_time, treated, ref = "-2") | id + time, data = df)

# ✅ Extract coefficients
event_coef <- coef(event_model)
event_se <- se(event_model)
coef_names <- names(event_coef)

# Parse event times from names
event_times <- as.numeric(gsub("event_time::(-?[0-9]+):treated", "\\1", coef_names))
if (any(is.na(event_times))) {
  cat("⚠️ Coefficient names:\n")
  print(coef_names)
  stop("❌ Failed to extract numeric event times.")
}

# Sort and organize
sorted_index <- order(event_times)
betahat <- event_coef[sorted_index]
sigma <- vcov(event_model)[sorted_index, sorted_index]
event_times <- event_times[sorted_index]

# Define pre- and post-periods
pre_periods <- event_times[event_times < 0]
post_periods <- event_times[event_times >= 0]

# ✅ Define l_vec: effect at t = 0 (short vector)
t0_index <- which(post_periods == 0)
l_vec <- basisVector(index = t0_index, size = length(post_periods))

# ✅ Run HonestDiD Relative Magnitude Bounds
relmag_result <- createSensitivityResults_relativeMagnitudes(
  betahat = betahat,
  sigma = sigma,
  numPrePeriods = length(pre_periods),
  numPostPeriods = length(post_periods),
  l_vec = l_vec,
  Mbarvec = c(0, 0.5, 1, 1.5, 2),
  bound = "deviation from linear trend"
)

# ✅ Construct naive (original) confidence set
original_ci <- constructOriginalCS(
  betahat = betahat,
  sigma = sigma,
  numPrePeriods = length(pre_periods),
  numPostPeriods = length(post_periods),
  l_vec = l_vec
)

# ✅ Plot robust and naive confidence intervals
plot_obj <- createSensitivityPlot_relativeMagnitudes(
  robustResults = relmag_result,
  originalResults = original_ci
)
print(plot_obj)

# ✅ Save plot as PNG
ggsave("HonestDiD_RelMagPlot.png", plot = plot_obj, width = 8, height = 5, dpi = 300)
cat("📁 Plot saved to: ", getwd(), "/HonestDiD_RelMagPlot.png\n", sep = "")
